/*
Copyright (C) 2001-2009, Parrot Foundation.

=head1 NAME

src/pmc/multisub.pmc - A container for multi-dispatched subs

=head1 DESCRIPTION

This class inherits from ResizablePMCArray and provides an Array of
Sub PMCs with the same short name, but different long names.

=head2 Functions

=over 4

=cut

*/

#include "pmc/pmc_callcontext.h"
#include "pmc/pmc_sub.h"

#define ADD_SUB(i, p, s) do { \
        PMC * __sig; \
        GETATTR_Sub_multi_signature((i), (s), __sig); \
        (i)->vtables[enum_class_Hash]->set_pmc_keyed((i), (p), (s)); \
    } while (0)

#define CHECK_IS_SUB(i, s) do { \
        STRING * const __i_str = CONST_STRING(INTERP, "invokable"); \
        if (!VTABLE_does((i), (s), __i_str)) \
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION, \
                    "attempt to set non-invokable PMC"); \
    } while (0)

/* HEADERIZER HFILE: none */
/* HEADERIZER BEGIN: static */
/* HEADERIZER END: static */

pmclass MultiSub extends Hash auto_attrs provides array provides invokable {

    VTABLE void init() {
        VTABLE_init_int(INTERP, SELF, Hash_key_PMC);
    }

    VTABLE void init_int(INTVAL type) {
        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
            "Cannot init_int a MultiSub PMC");
    }

    VTABLE STRING * get_string() {
        Hash * const hash = PARROT_HASH(SELF)->hash;
        parrot_hash_iterate_linear(hash, {
            PMC * const value = _bucket->value;
            return VTABLE_get_string(INTERP, value);
        });
        return STRINGNULL;
    }

    VTABLE void push_pmc(PMC *value) {
        CHECK_IS_SUB(INTERP, value);
        ADD_SUB(INTERP, SELF, value);
    }

    VTABLE void set_pmc_keyed_int(INTVAL dummy, PMC *value) {
        CHECK_IS_SUB(INTERP, value);
        ADD_SUB(INTERP, SELF, sub);
    }

    VTABLE void set_pmc_keyed(PMC * key, PMC *sub) {
        CHECK_IS_SUB(INTERP, value);
        SUPER(key, sub);
    }

    VTABLE opcode_t *invoke(void *next) {
        PMC * const sig_obj = CONTEXT(INTERP)->current_sig;
        PMC * const func    = Parrot_mmd_sort_manhattan_by_sig_pmc(INTERP,
                SELF, sig_obj);

        if (PMC_IS_NULL(func))
            Parrot_ex_throw_from_c_args(INTERP, NULL, 1,
                    "No applicable candidates found to dispatch to for '%Ss'",
                    VTABLE_get_string(INTERP, SELF));
        return VTABLE_invoke(INTERP, func, next);
    }
}

/*

=back

=head1 SEE ALSO

F<src/multidispatch.c>,

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4 cinoptions='\:2=2' :
 */
